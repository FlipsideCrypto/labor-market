/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LaborMarketInterfaceInterface extends utils.Interface {
  functions: {};

  events: {
    "LaborMarketConfigured(address,address)": EventFragment;
    "RemainderClaimed(address,uint256,address,bool)": EventFragment;
    "RequestConfigured(address,uint256,uint48,uint48,uint48,uint64,uint64,uint256,uint256,address,address,string)": EventFragment;
    "RequestFulfilled(address,uint256,uint256,string)": EventFragment;
    "RequestPayClaimed(address,uint256,uint256,uint256,address)": EventFragment;
    "RequestReviewed(address,uint256,uint256,uint256,string)": EventFragment;
    "RequestSignal(address,uint256)": EventFragment;
    "RequestWithdrawn(uint256)": EventFragment;
    "ReviewSignal(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LaborMarketConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemainderClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestPayClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestReviewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSignal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewSignal"): EventFragment;
}

export interface LaborMarketConfiguredEventObject {
  deployer: string;
  criteria: string;
}
export type LaborMarketConfiguredEvent = TypedEvent<
  [string, string],
  LaborMarketConfiguredEventObject
>;

export type LaborMarketConfiguredEventFilter =
  TypedEventFilter<LaborMarketConfiguredEvent>;

export interface RemainderClaimedEventObject {
  claimer: string;
  requestId: BigNumber;
  to: string;
  settled: boolean;
}
export type RemainderClaimedEvent = TypedEvent<
  [string, BigNumber, string, boolean],
  RemainderClaimedEventObject
>;

export type RemainderClaimedEventFilter =
  TypedEventFilter<RemainderClaimedEvent>;

export interface RequestConfiguredEventObject {
  requester: string;
  requestId: BigNumber;
  signalExp: number;
  submissionExp: number;
  enforcementExp: number;
  providerLimit: BigNumber;
  reviewerLimit: BigNumber;
  pTokenProviderTotal: BigNumber;
  pTokenReviewerTotal: BigNumber;
  pTokenProvider: string;
  pTokenReviewer: string;
  uri: string;
}
export type RequestConfiguredEvent = TypedEvent<
  [
    string,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  RequestConfiguredEventObject
>;

export type RequestConfiguredEventFilter =
  TypedEventFilter<RequestConfiguredEvent>;

export interface RequestFulfilledEventObject {
  fulfiller: string;
  requestId: BigNumber;
  submissionId: BigNumber;
  uri: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestPayClaimedEventObject {
  claimer: string;
  requestId: BigNumber;
  submissionId: BigNumber;
  payAmount: BigNumber;
  to: string;
}
export type RequestPayClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  RequestPayClaimedEventObject
>;

export type RequestPayClaimedEventFilter =
  TypedEventFilter<RequestPayClaimedEvent>;

export interface RequestReviewedEventObject {
  reviewer: string;
  requestId: BigNumber;
  submissionId: BigNumber;
  reviewScore: BigNumber;
  uri: string;
}
export type RequestReviewedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  RequestReviewedEventObject
>;

export type RequestReviewedEventFilter = TypedEventFilter<RequestReviewedEvent>;

export interface RequestSignalEventObject {
  signaler: string;
  requestId: BigNumber;
}
export type RequestSignalEvent = TypedEvent<
  [string, BigNumber],
  RequestSignalEventObject
>;

export type RequestSignalEventFilter = TypedEventFilter<RequestSignalEvent>;

export interface RequestWithdrawnEventObject {
  requestId: BigNumber;
}
export type RequestWithdrawnEvent = TypedEvent<
  [BigNumber],
  RequestWithdrawnEventObject
>;

export type RequestWithdrawnEventFilter =
  TypedEventFilter<RequestWithdrawnEvent>;

export interface ReviewSignalEventObject {
  signaler: string;
  requestId: BigNumber;
  quantity: BigNumber;
}
export type ReviewSignalEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReviewSignalEventObject
>;

export type ReviewSignalEventFilter = TypedEventFilter<ReviewSignalEvent>;

export interface LaborMarketInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaborMarketInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LaborMarketConfigured(address,address)"(
      deployer?: null,
      criteria?: null
    ): LaborMarketConfiguredEventFilter;
    LaborMarketConfigured(
      deployer?: null,
      criteria?: null
    ): LaborMarketConfiguredEventFilter;

    "RemainderClaimed(address,uint256,address,bool)"(
      claimer?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      settled?: null
    ): RemainderClaimedEventFilter;
    RemainderClaimed(
      claimer?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      settled?: null
    ): RemainderClaimedEventFilter;

    "RequestConfigured(address,uint256,uint48,uint48,uint48,uint64,uint64,uint256,uint256,address,address,string)"(
      requester?: PromiseOrValue<string> | null,
      requestId?: null,
      signalExp?: null,
      submissionExp?: null,
      enforcementExp?: null,
      providerLimit?: null,
      reviewerLimit?: null,
      pTokenProviderTotal?: null,
      pTokenReviewerTotal?: null,
      pTokenProvider?: PromiseOrValue<string> | null,
      pTokenReviewer?: PromiseOrValue<string> | null,
      uri?: null
    ): RequestConfiguredEventFilter;
    RequestConfigured(
      requester?: PromiseOrValue<string> | null,
      requestId?: null,
      signalExp?: null,
      submissionExp?: null,
      enforcementExp?: null,
      providerLimit?: null,
      reviewerLimit?: null,
      pTokenProviderTotal?: null,
      pTokenReviewerTotal?: null,
      pTokenProvider?: PromiseOrValue<string> | null,
      pTokenReviewer?: PromiseOrValue<string> | null,
      uri?: null
    ): RequestConfiguredEventFilter;

    "RequestFulfilled(address,uint256,uint256,string)"(
      fulfiller?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      submissionId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      fulfiller?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      submissionId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): RequestFulfilledEventFilter;

    "RequestPayClaimed(address,uint256,uint256,uint256,address)"(
      claimer?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      submissionId?: PromiseOrValue<BigNumberish> | null,
      payAmount?: null,
      to?: null
    ): RequestPayClaimedEventFilter;
    RequestPayClaimed(
      claimer?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      submissionId?: PromiseOrValue<BigNumberish> | null,
      payAmount?: null,
      to?: null
    ): RequestPayClaimedEventFilter;

    "RequestReviewed(address,uint256,uint256,uint256,string)"(
      reviewer?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      submissionId?: PromiseOrValue<BigNumberish> | null,
      reviewScore?: null,
      uri?: null
    ): RequestReviewedEventFilter;
    RequestReviewed(
      reviewer?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      submissionId?: PromiseOrValue<BigNumberish> | null,
      reviewScore?: null,
      uri?: null
    ): RequestReviewedEventFilter;

    "RequestSignal(address,uint256)"(
      signaler?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null
    ): RequestSignalEventFilter;
    RequestSignal(
      signaler?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null
    ): RequestSignalEventFilter;

    "RequestWithdrawn(uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null
    ): RequestWithdrawnEventFilter;
    RequestWithdrawn(
      requestId?: PromiseOrValue<BigNumberish> | null
    ): RequestWithdrawnEventFilter;

    "ReviewSignal(address,uint256,uint256)"(
      signaler?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      quantity?: PromiseOrValue<BigNumberish> | null
    ): ReviewSignalEventFilter;
    ReviewSignal(
      signaler?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      quantity?: PromiseOrValue<BigNumberish> | null
    ): ReviewSignalEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
