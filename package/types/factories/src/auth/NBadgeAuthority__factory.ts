/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NBadgeAuthority,
  NBadgeAuthorityInterface,
} from "../../../src/auth/NBadgeAuthority";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "sig",
        type: "bytes4",
      },
    ],
    name: "canCall",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610119806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b700961314602d575b600080fd5b60416038366004607d565b60019392505050565b604051901515815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff81168114607857600080fd5b919050565b600080600060608486031215609157600080fd5b6098846055565b925060a4602085016055565b915060408401357fffffffff000000000000000000000000000000000000000000000000000000008116811460d857600080fd5b80915050925092509256fea2646970667358221220fa3012c8ff8aaae8a5691aad27d4d94856400feaa9afc06138663d8b6fc49cb564736f6c63430008110033";

type NBadgeAuthorityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NBadgeAuthorityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NBadgeAuthority__factory extends ContractFactory {
  constructor(...args: NBadgeAuthorityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NBadgeAuthority> {
    return super.deploy(overrides || {}) as Promise<NBadgeAuthority>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NBadgeAuthority {
    return super.attach(address) as NBadgeAuthority;
  }
  override connect(signer: Signer): NBadgeAuthority__factory {
    return super.connect(signer) as NBadgeAuthority__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NBadgeAuthorityInterface {
    return new utils.Interface(_abi) as NBadgeAuthorityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NBadgeAuthority {
    return new Contract(address, _abi, signerOrProvider) as NBadgeAuthority;
  }
}
