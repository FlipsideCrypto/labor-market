/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Multicall3Mock,
  Multicall3MockInterface,
} from "../../../../src/mocks/Multicall3.sol/Multicall3Mock";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3Mock.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610eff908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c80630f28c97d14610153578063174dea711461014a578063252dba421461014157806327e86d6e146101385780633408e4701461012f578063399542e9146101265780633e64a6961461011d57806342cbb15c146101145780634d2301cc1461010b57806372425d9d1461010257806382ad56cb146100f957806386d516e8146100f0578063a8b0574e146100e7578063bce38bd7146100de578063c3077fa9146100d55763ee82ac5e146100cd57600080fd5b61000e6109e5565b5061000e61094a565b5061000e610926565b5061000e6108ec565b5061000e6108b2565b5061000e6107c7565b5061000e61078d565b5061000e610746565b5061000e6106ee565b5061000e6106b4565b5061000e61068f565b5061000e6105e2565b5061000e610585565b5061000e6104a5565b5061000e61030b565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051428152f35b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261000e576004359067ffffffffffffffff821161000e576102079160040161018d565b9091565b919082519283825260005b8481106102555750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610216565b908082519081815260208091019281808460051b8301019501936000915b8483106102975750505050505090565b90919293949584806102e7837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08660019603018752828b518051151583520151906040908185820152019061020b565b9801930193019194939290610287565b906020610308928181520190610269565b90565b50610315366101be565b600061032082610ca0565b91815b8181106103495761034584610339853414610e64565b604051918291826102f7565b0390f35b6103538185610c19565b5161035f828488610e16565b6000806040610393818501358099019861037886610b48565b926103866060880188610b52565b9390915180948193610ba3565b03925af1916103a0610bb1565b906103b5602094859384840152829015159052565b5191013517156103c85750600101610323565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b90604082019082526020604081840152835180925260608301928160608460051b8301019501936000915b8483106104595750505050505090565b9091929394958480610495837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa086600196030187528a5161020b565b9801930193019194939290610449565b506104af366101be565b906104c16104bc83610aa3565b610a52565b918083527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06104ef82610aa3565b0160005b81811061057457505060005b818110610515576040518061034586438361041e565b8061056e6000806105296001958789610afa565b8161054161053683610b48565b926020810190610b52565b919061055260405180948193610ba3565b03925af161055e610bb1565b6105688489610c19565b52610c3b565b016104ff565b8060606020809388010152016104f3565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301408152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051468152f35b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261000e57600435801515810361000e57916024359067ffffffffffffffff821161000e576102079160040161018d565b6103089392606092825260208201528160408201520190610269565b506103456106a561069f3661061c565b91610d32565b60405191829143404384610673565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051488152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051438152f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060043561078481610728565b31604051908152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051448152f35b506107d1366101be565b6107da81610ca0565b9060005b8181106107f3576040518061034585826102f7565b6107fd8184610c19565b51610809828487610dc8565b60008061081583610b48565b61082782604061038681880188610b52565b03925af191610834610bb1565b90610849602094859384840152829015159052565b51910135171561085c57506001016107de565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051458152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051418152f35b5061034561093661069f3661061c565b604051918291602083526020830190610269565b50610954366101be565b61095d81610ca0565b9160005b82811061097a5760405180610345864380409084610673565b806109df61098a60019387610c19565b51610996838787610afa565b60008082356109a481610728565b816109b460209586810190610b52565b9190826040519384928337810182815203925af1906109d1610bb1565b908301521515809152610c3b565b01610961565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051600435408152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff821117610a9657604052565b610a9e610a22565b604052565b60209067ffffffffffffffff8111610abd575b60051b0190565b610ac5610a22565b610ab6565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015610b3b575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18136030182121561000e570190565b610b43610aca565b610b04565b3561030881610728565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561000e570180359067ffffffffffffffff821161000e5760200191813603831361000e57565b908092918237016000815290565b3d15610c14573d9067ffffffffffffffff8211610c07575b610bfa60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610a52565b9182523d6000602084013e565b610c0f610a22565b610bc9565b606090565b6020918151811015610c2e575b60051b010190565b610c36610aca565b610c26565b15610c4257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c65640000000000000000006044820152fd5b90610cad6104bc83610aa3565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610cdb8294610aa3565b0190600090815b838110610cef5750505050565b60209060408051908082019082821067ffffffffffffffff831117610d25575b5284815282606081830152828501015201610ce2565b610d2d610a22565b610d0f565b929190610d3e82610ca0565b9360005b838110610d4f5750505050565b80610d5c60019288610c19565b5183610d69838888610afa565b6000808235610d7781610728565b81610d8760209586810190610b52565b9190826040519384928337810182815203925af190610da4610bb1565b908401521515809252610db9575b5001610d42565b610dc290610c3b565b38610db2565b9190811015610e09575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18136030182121561000e570190565b610e11610aca565b610dd2565b9190811015610e57575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818136030182121561000e570190565b610e5f610aca565b610e20565b15610e6b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152fdfea2646970667358221220e7566a5d2116c68c9816516817620ce0d2b93e071be78de8028e94fd4e72f3f464736f6c63430008110033";

type Multicall3MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3Mock__factory extends ContractFactory {
  constructor(...args: Multicall3MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3Mock> {
    return super.deploy(overrides || {}) as Promise<Multicall3Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3Mock {
    return super.attach(address) as Multicall3Mock;
  }
  override connect(signer: Signer): Multicall3Mock__factory {
    return super.connect(signer) as Multicall3Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3MockInterface {
    return new utils.Interface(_abi) as Multicall3MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3Mock {
    return new Contract(address, _abi, signerOrProvider) as Multicall3Mock;
  }
}
