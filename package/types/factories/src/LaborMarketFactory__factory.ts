/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LaborMarketFactory,
  LaborMarketFactoryInterface,
} from "../../src/LaborMarketFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "marketAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "LaborMarketCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_deployer",
        type: "address",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
      {
        internalType: "contract EnforcementCriteriaInterface",
        name: "_criteria",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_auxilaries",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_alphas",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_betas",
        type: "uint256[]",
      },
      {
        internalType: "bytes4[]",
        name: "_sigs",
        type: "bytes4[]",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "deployerAllowed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "required",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "contract IERC1155",
                name: "badge",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "points",
                type: "uint256",
              },
            ],
            internalType: "struct NBadgeAuthInterface.Badge[]",
            name: "badges",
            type: "tuple[]",
          },
        ],
        internalType: "struct NBadgeAuthInterface.Node[]",
        name: "_nodes",
        type: "tuple[]",
      },
    ],
    name: "createLaborMarket",
    outputs: [
      {
        internalType: "address",
        name: "laborMarketAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461007857601f61092838819003918201601f19168301916001600160401b0383118484101761007d5780849260209460405283398101031261007857516001600160a01b038116810361007857608052604051610894908161009482396080518181816101d80152818161046801526107c70152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c9081635c60da1b1461077d575063832d1c421461003757600080fd5b3461077a576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261077a576004359073ffffffffffffffffffffffffffffffffffffffff8216820361077a5767ffffffffffffffff6024351161077a5736602360243501121561077a5767ffffffffffffffff602435600401351161077a57366024803560040135813501011161077a576044359173ffffffffffffffffffffffffffffffffffffffff831683036107765760643567ffffffffffffffff81116107725761010e9036906004016107eb565b919060843567ffffffffffffffff811161076e576101309036906004016107eb565b60a43567ffffffffffffffff811161076a576101509036906004016107eb565b9060c43567ffffffffffffffff8111610766576101719036906004016107eb565b92909467ffffffffffffffff60e43511610700576101943660e4356004016107eb565b95909773ffffffffffffffffffffffffffffffffffffffff60378d604051907f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060601b60148301527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028830152f0169a8b15610708578b3b15610704579c969593918c989593916040519e8f998d7fe1658eb1000000000000000000000000000000000000000000000000000000008c5273ffffffffffffffffffffffffffffffffffffffff1660048c015260248b016101009052602435600401356101048c015261012490602435600401358c836024356024019101378c828d6024356004013501015260243560040135601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168c019073ffffffffffffffffffffffffffffffffffffffff1660448d01528b81036101200160648d0152019061031e92610821565b908882037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0160848a015261035292610821565b908682037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0160a488015261038692610821565b8481037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0160c4860152818152602001919085905b808210610692575050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8382030160e4840152818152602081019160208160051b830101928686935b8385106104e657505050505081929350038183865af180156104db57610491575b6020935060405192827f3c036db17d0d0b5dd4eb57da1cc3bb081ed8e75504d2b5250d42b318071c26c773ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001694169280a48152f35b919267ffffffffffffffff81116104ae5760405260209291610426565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6040513d85823e3d90fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe091949750809396508592950301845286357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18436030181121561068e5783810135801515810361068a5715158252808401602081810135908401526040810135929036037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe10183121561068a5767ffffffffffffffff8583018401351161068a578185018301803560a002360360209091011361068a578060606040608093959495015260608101868501840135905201916020858201830101918c915b86810182013583106106105750505050602080600192980194019501919489958b9592979497610405565b90919293843573ffffffffffffffffffffffffffffffffffffffff811681036106865760a060019273ffffffffffffffffffffffffffffffffffffffff829316815260208801356020820152604088013560408201526060880135606082015260808801356080820152019501930191906105e5565b8e80fd5b8b80fd5b8a80fd5b9291955092935084357fffffffff00000000000000000000000000000000000000000000000000000000811681036107005760206001927fffffffff0000000000000000000000000000000000000000000000000000000082931681520195019201918993928995926103bb565b8980fd5b8c80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152fd5b8880fd5b8680fd5b8480fd5b8280fd5b5080fd5b80fd5b90503461077657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107765760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9181601f8401121561081c5782359167ffffffffffffffff831161081c576020808501948460051b01011161081c57565b600080fd5b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161081c5760209260051b80928483013701019056fea26469706673582212204040d538c6a22f6679c924c5aaa9eb71ec189033f8ba9300eced5b3fe39e546d64736f6c63430008110033";

type LaborMarketFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LaborMarketFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LaborMarketFactory__factory extends ContractFactory {
  constructor(...args: LaborMarketFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LaborMarketFactory> {
    return super.deploy(
      _implementation,
      overrides || {}
    ) as Promise<LaborMarketFactory>;
  }
  override getDeployTransaction(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_implementation, overrides || {});
  }
  override attach(address: string): LaborMarketFactory {
    return super.attach(address) as LaborMarketFactory;
  }
  override connect(signer: Signer): LaborMarketFactory__factory {
    return super.connect(signer) as LaborMarketFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LaborMarketFactoryInterface {
    return new utils.Interface(_abi) as LaborMarketFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LaborMarketFactory {
    return new Contract(address, _abi, signerOrProvider) as LaborMarketFactory;
  }
}
