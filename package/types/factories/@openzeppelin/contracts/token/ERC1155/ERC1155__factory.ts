/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC1155,
  ERC1155Interface,
} from "../../../../../@openzeppelin/contracts/token/ERC1155/ERC1155";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "uri_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523462000031575b6200001f62000019620001b9565b620001dc565b6040516115f86200040582396115f890f35b6200003a600080fd5b6200000b565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200007957604052565b6200008362000040565b604052565b906200009f6200009760405190565b928362000057565b565b602090620000c2906001600160401b038111620000c657601f01601f191690565b0190565b620000d062000040565b601f01601f191690565b60005b838110620000ee5750506000910152565b8181015183820152602001620000dd565b9291906200009f916200011c6200011683620000a1565b62000088565b9482865260208601918382011115620000da5762000138600080fd5b620000da565b906200015d9181601f8201121562000160575b602081519101620000ff565b90565b62000169600080fd5b62000151565b906200015d91602081830312620001aa575b8051906001600160401b0382116200019b575b016200013e565b620001a4600080fd5b62000194565b620001b3600080fd5b62000181565b6200015d620019fd80380380620001d08162000088565b9283398101906200016f565b6200009f90620003f7565b50634e487b7160e01b600052602260045260246000fd5b906001600283049216801562000225575b60208310146200021b57565b6200009f620001e7565b91607f16916200020f565b6200015d6200015d6200015d9290565b9190620002556200015d620002719362000230565b9083549160001960089290920291821b911b9181191691161790565b9055565b6200009f9160009162000240565b8181106200028f575050565b806200029f600060019362000275565b0162000283565b9190601f8111620002b657505050565b620002ca6200009f93600052602060002090565b906020601f840181900483019310620002ee575b6020601f90910104019062000283565b9091508190620002de565b9062000303815190565b906001600160401b038211620003db575b6200032c82620003258554620001fe565b85620002a6565b602090601f83116001146200036b57620002719291600091836200035f575b5050600019600883021c1916906002021790565b0151905038806200034b565b601f198316916200038185600052602060002090565b9260005b818110620003c257509160029391856001969410620003a8575b50505002019055565b01516000196008601f8516021c191690553880806200039f565b9193602060018192878701518155019501920162000385565b620003e562000040565b62000314565b906200009f91620002f9565b6200009f906002620003eb56fe60806040526004361015610018575b610016600080fd5b005b60003560e01c8062fdd58e146100b757806301ffc9a7146100ae5780630e89341c146100a55780632eb2c2d61461009c5780634e1273f414610093578063a22cb4651461008a578063e985e9c5146100815763f242432a0361000e5761007c6107de565b61000e565b5061007c610762565b5061007c610709565b5061007c61068c565b5061007c6104ff565b5061007c610278565b5061007c6101b2565b5061007c610139565b600080fd5b6001600160a01b031690565b90565b6001600160a01b0381165b036100c057565b905035906100f3826100d4565b565b806100df565b905035906100f3826100f5565b91906100d19060408482031261012c575b61012381856100e6565b936020016100fb565b610134600080fd5b610119565b503461016b575b610167610157610151366004610108565b90610a3a565b6040519182918290815260200190565b0390f35b610173600080fd5b610140565b6001600160e01b031981166100df565b905035906100f382610178565b906100d19160208183031215610188576101ad600080fd5b610188565b50346101e2575b6101676101cf6101ca366004610195565b610809565b6040515b91829182901515815260200190565b6101ea600080fd5b6101b9565b906100d191602081830312156100fb57610207600080fd5b6100fb565b60005b83811061021f5750506000910152565b818101518382015260200161020f565b601f01601f191690565b61025a61022f6020936102639361024e815190565b80835293849260200190565b9586910161020c565b0190565b60208082526100d192910190610239565b50346102a1575b6101676102956102903660046101ef565b610950565b60405191829182610267565b6102a9600080fd5b61027f565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176102e757604052565b6102ef6102ae565b604052565b906100f361030160405190565b92836102c5565b6020809167ffffffffffffffff811161032057020190565b6103286102ae565b020190565b9092919261034261033d82610308565b6102f4565b9381855260208086019202830192818411610380575b915b8383106103675750505050565b6020809161037584866100fb565b81520192019161035a565b610388600080fd5b610358565b906100d19181601f820112156103a9575b60208135910161032d565b6103b1600080fd5b61039e565b61026360209167ffffffffffffffff81116103d557601f01601f191690565b61022f6102ae565b90826000939282370152565b9291906100f3916103fc61033d836103b6565b94828652602086019183820111156103dd57610416600080fd5b6103dd565b906100d19181601f82011215610437575b6020813591016103e9565b61043f600080fd5b61042c565b919060a0838203126104f2575b61045b81846100e6565b9261046982602083016100e6565b926100d161048d84604085013567ffffffffffffffff81116104e5575b850161038d565b936104ae81606086013567ffffffffffffffff81116104d8575b860161038d565b9360808101359067ffffffffffffffff82116104cb575b0161041b565b6104d3600080fd5b6104c5565b6104e0600080fd5b6104a7565b6104ed600080fd5b610486565b6104fa600080fd5b610451565b5034610522575b61051d610514366004610444565b93929092610cff565b604051005b61052a600080fd5b610506565b9092919261053f61033d82610308565b938185526020808601920283019281841161057d575b915b8383106105645750505050565b6020809161057284866100e6565b815201920191610557565b610585600080fd5b610555565b906100d19181601f820112156105a6575b60208135910161052f565b6105ae600080fd5b61059b565b91906100d190604084820312610618575b6105e181853567ffffffffffffffff811161060b575b860161058a565b9360208101359067ffffffffffffffff82116105fe575b0161038d565b610606600080fd5b6105f8565b610613600080fd5b6105da565b610620600080fd5b6105c4565b9061064561063e610634845190565b8084529260200190565b9260200190565b9060005b8181106106565750505090565b90919261067361066c6001928651815260200190565b9460200190565b929101610649565b60208082526100d192910190610625565b50346106b6575b6101676106aa6106a43660046105b3565b90610b85565b6040519182918261067b565b6106be600080fd5b610693565b8015156100df565b905035906100f3826106c3565b91906100d1906040848203126106fc575b6106f381856100e6565b936020016106cb565b610704600080fd5b6106e9565b5034610724575b61051d61071e3660046106d8565b90610c28565b61072c600080fd5b610710565b91906100d190604084820312610755575b61074c81856100e6565b936020016100e6565b61075d600080fd5b610742565b5034610780575b6101676101cf61077a366004610731565b90610c33565b610788600080fd5b610769565b919060a0838203126107d1575b6107a481846100e6565b926107b282602083016100e6565b926100d16107c384604085016100fb565b936104ae81606086016100fb565b6107d9600080fd5b61079a565b50346107fc575b61051d6107f336600461078d565b93929092610cb9565b610804600080fd5b6107e5565b636cdb3d1360e11b6001600160e01b0319821614908115610839575b811561082f575090565b6100d191506115ae565b6001600160e01b031981166303a24d0760e21b149150610825565b50634e487b7160e01b600052602260045260246000fd5b906001600283049216801561088e575b602083101461088657565b6100f3610854565b91607f169161087b565b805460009392916108b56108ab8361086b565b8085529360200190565b916001811690811561090757506001146108ce57505050565b6108e19192939450600052602060002090565b916000925b8184106108f35750500190565b8054848401526020909301926001016108e6565b92949550505060ff1916825215156020020190565b906100d191610898565b906100f36109409261093760405190565b9384809261091c565b03836102c5565b6100d190610926565b506100d16002610947565b6100c56100d16100d19290565b6100d19061095b565b1561097857565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b0390fd5b6100d16100d16100d19290565b906109eb906109d4565b600052602052604060002090565b6100d1906100c5906001600160a01b031682565b6100d1906109f9565b6100d190610a0d565b906109eb90610a16565b6100d19081565b6100d19054610a29565b610a7a90610a756100d193610a4d600090565b506000610a70610a5f6100c583610968565b6001600160a01b0386161415610971565b6109e1565b610a1f565b610a30565b15610a8657565b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608490fd5b90610aea61033d83610308565b918252565b369037565b906100f3610b0a610b0484610add565b93610308565b601f190160208401610aef565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610b3e570190565b610263610b17565b50634e487b7160e01b600052603260045260246000fd5b9060208091610b6a845190565b811015610b78575b02010190565b610b80610b46565b610b72565b90610ba9610b91835190565b610ba3610b9f6100d1855190565b9190565b14610a7f565b610bb9610bb4835190565b610af4565b91610bc460006109d4565b610bcf6100d1835190565b811015610c225780610c18610c0b610bfa610bed610c1d9587610b5d565b516001600160a01b031690565b610151610c078589610b5d565b5190565b610c158388610b5d565b52565b610b2e565b610bc4565b50505090565b6100f391903361114e565b6100d191610a75610c4e92610c46600090565b506001610a1f565b5460ff1690565b15610c5c57565b60405162461bcd60e51b815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526e195c881b9bdc88185c1c1c9bdd9959608a1b6064820152608490fd5b6100f39493929190610ce9335b6001600160a01b0381166001600160a01b03841614908115610cee575b50610c55565b610e21565b610cf9915083610c33565b38610ce3565b6100f39493929190610d1033610cc6565b610f9d565b15610d1c57565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15610d7657565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b90600019905b9181191691161790565b90610dee6100d1610df5926109d4565b8254610dce565b9055565b91908201809211610e0657565b6100f3610b17565b9081526040810192916100f39160200152565b906100f3949392916000610e4c610e3a6100c583610968565b6001600160a01b0385165b1415610d15565b610ec0610ea884610a75873395610e6282611578565b50610e6c8b611578565b50610a70610e958c610e85610a7a8c610a7588886109e1565b610e9182821015610d6f565b0390565b610ea38a610a7586866109e1565b610dde565b610eba87610eb583610a30565b610df9565b90610dde565b7fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62610eea82610a16565b610ef384610a16565b90610efd86610a16565b92610f0760405190565b80610f138b8b83610e0e565b0390a46112d8565b15610f2257565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b60408082526100d1939192610f8f91840190610625565b916020818403910152610625565b9291949094610fc1610fad825190565b610fbb610b9f6100d1875190565b14610f1b565b600091610fe2610fd36100c585610968565b6001600160a01b038916610e45565b3395610fed846109d4565b610ff86100d1855190565b81101561106a5780610c1888610eba61105b8d610a758c6110558d610ea36110358f8c61102f6110659f610c0790610c0794610b5d565b96610b5d565b98610a758561104f8c610e85610a7a86610a75868b6109e1565b946109e1565b8c6109e1565b91610eb583610a30565b610fed565b509490969192506100f3957f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb61109f82610a16565b6110a884610a16565b906110b286610a16565b926110bc60405190565b806110c88b8b83610f78565b0390a461151d565b156110d757565b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608490fd5b9060ff90610dd4565b906111476100d1610df592151590565b825461112e565b61116c6001600160a01b0383166001600160a01b03831614156110d0565b6111848361117f84610a75856001610a1f565b611137565b6111c46111ba6111b47f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193610a16565b93610a16565b936101d360405190565b0390a3565b905051906100f382610178565b906100d191602081830312156111c9576111ee600080fd5b6111c9565b91936112366100d1969461122f61123d949761121f60a088019960008901906001600160a01b03169052565b6001600160a01b03166020870152565b6040850152565b6060830152565b6080818403910152610239565b60009060033d1161125757565b905060046000803e60005160e01c90565b60009060443d106100f35760405160043d036004823e8051903d602483011167ffffffffffffffff8311176112d45781810191825167ffffffffffffffff81116112ce5780602085010160043d038401106112ce576100d19394955060200101906102c5565b50505050565b5050565b909493949291926112e88461159c565b6112f5575b505050505050565b600061130a611305602096610a16565b610a16565b9261133963f23a6e619761131d60405190565b998a978896879561132e8d60e01b90565b8752600487016111f3565b03925af160009281611488575b50611409575050600161135761124a565b6308c379a0146113d4575b611372575b3880808080806112ed565b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608490fd5b6113dc611268565b806113e75750611362565b6109d0906113f460405190565b62461bcd60e51b815291829160048301610267565b61141f61142d9160e01b63ffffffff60e01b1690565b916001600160e01b03191690565b146113675760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608490fd5b6114aa91935060203d81116114b1575b6114a281836102c5565b8101906111d6565b9138611346565b503d611498565b9390611501906100d196946114f461150f956114e460a08a019460008b01906001600160a01b03169052565b6001600160a01b03166020890152565b8682036040880152610625565b908482036060860152610625565b916080818403910152610239565b9094939492919261152d8461159c565b61153957505050505050565b6000611549611305602096610a16565b9261133963bc197c819761155c60405190565b998a978896879561156d8d60e01b90565b8752600487016114b8565b6100d1611588610bb460016109d4565b91610c1561159660006109d4565b84610b5d565b3b6115aa610b9f60006109d4565b1190565b6115be6301ffc9a760e01b61141f565b149056fea26469706673582212205689aa533e3dbb06fe5826ce5ab882f1b8a3223a5eea7b57a9d0960a65fd836a64736f6c63430008110033";

type ERC1155ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155__factory extends ContractFactory {
  constructor(...args: ERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC1155> {
    return super.deploy(uri_, overrides || {}) as Promise<ERC1155>;
  }
  override getDeployTransaction(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(uri_, overrides || {});
  }
  override attach(address: string): ERC1155 {
    return super.attach(address) as ERC1155;
  }
  override connect(signer: Signer): ERC1155__factory {
    return super.connect(signer) as ERC1155__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155Interface {
    return new utils.Interface(_abi) as ERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155 {
    return new Contract(address, _abi, signerOrProvider) as ERC1155;
  }
}
